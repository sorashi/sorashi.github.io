[{"content":"You might think that knowing the number of zeros that suffix the value of $n!$ is useless. And you might be right. At least I haven\u0026rsquo;t thought of any use.\nEven though, I want to leave this here, because I found this out while solving something else.\nSo the problem is:\nGiven $n$, return the maximum number of zeros, that suffix $n!$. For example for $n=5$, $n! = 15511210043330985984000000$, so the answer would be $6$.\nWe could compute the value of the factorial and count the number of zeros. We\u0026rsquo;d get the result this way in $\\mathcal O(n + \\log (n!))$ time (compute $n!$ plus count the zeros), which is $\\mathcal O(n\\log (n))$.\nLet\u0026rsquo;s use the following fact\nThe number of zeros at the end of a number $n$ is equivalent to the number of times $n$ can be evenly divided by ten.\nSo an equivalent problem to the one given above is: How many 10s can you factor out of $n!$.\nWe could scan the numbers 1 through $n$ and find the number of 10s that get made when computing the factorial. For example, $2\\cdot 5$ makes a ten, $10$ makes a ten, $15\\cdot 4=60$ makes a ten, $20$ makes a ten, $25*8=200$ makes two tens! That\u0026rsquo;s 6 tens in total, the answer to the example of $25!$.\nA pattern appears here. For each number $x$ in $(1\\dots n)$, sum the number of times we can divide $x$ by 5, and that\u0026rsquo;s our result.\n$$\\sum_{x=1}^n \\max\\left(\\left\\{k\\in\\mathbb N^+\\mid x\\equiv 0\\ (\\text{mod } 5^k)\\right\\}\\cup {0}\\right)$$\nWhy is that? Well, a ten is made from 2 and 5. Informally, there is so many 2s to pair with 5s, that we can just count the 5s. 5 can be paired with 2. 10 can be paired with the two in 4. The five in 15 can be paired with the second two in 4. 20 can be paired with a two in 8. And so on.\nMore formally, let\u0026rsquo;s define\n$$g(n, a):= \\sum_{x=1}^n \\max\\left(\\left\\{k\\in\\mathbb N^+\\mid x\\equiv 0\\ (\\text{mod } a^k)\\right\\}\\cup {0}\\right),,$$\nthen for a given large $n$, it holds $g(n, 5)\\leq g(n, 2)$, which can be easily seen. Generally $a\u0026gt;b \\iff g(n,a)\\leq g(n,b)$.\nNow how do we compute $g(n, 5)$ efficiently? A straight-forward way is to go through each number and try each $k$, that would be $\\mathcal O(n^2)$. With a more clever approach, I\u0026rsquo;m sure this can be made $\\mathcal O(n)$.\nBut let\u0026rsquo;s think even smaller.\nI propose\n$$g(n, a) = \\sum_{i=1}^{\\lfloor \\log_a n \\rfloor}\\lfloor \\frac{n}{a^i}\\rfloor,.$$\nWhy does this count the number of times we find the factor $a$ in the numbers from $1$ to $n$? Well, it takes into account all powers of $a$. First it divides by $a^1$, which finds how many $a$\u0026rsquo;s there are in $n$. That includes even numbers which contain $a\\cdot a$ as a factor, or $a\\cdot a \\cdot a$, and so on. For each of these, it adds one to the sum.\nNext, we divide $n$ by $a^2$. This finds the number of times $a\\cdot a$ appear as a factor. It counts when $a\\cdot a$ or $a\\cdot a\\cdot a\\cdots$ appear, but not when $a$ appears alone. For each of these it adds one to the sum. Which is correct \u0026ndash; we already added one for the second $a$ that appears in $a\\cdot a$.\nThis continues while $a^i\\leq n$. Let\u0026rsquo;s see an example. For $g(25, 5)$, we get\n$$ \\lfloor\\frac{25}{5}\\rfloor+\\lfloor\\frac{25}{25}\\rfloor=5+1=6,. $$\nThe first division counts a single five in $5, 10, 15, 20$ and $25$. The second division counts the second five in $25$.\nOur original problem is the result of $g(n,5)$. This runs in $\\mathcal O(\\log n)$ time. Nice.\nNow what\u0026rsquo;s interesting and is just my unproven funny informal small conjecture (which I plan to think about later)\n$$\\sum_{i=1}^{\\lfloor \\log_a n \\rfloor}\\lfloor \\frac{n}{a^i}\\rfloor=\\lfloor \\frac{n}{a-1}\\rfloor -\\xi(n, a),,$$\nwhere $\\xi\\colon (\\mathbb N\\times \\mathbb N)\\to \\mathbb N$ is an unknown function, with an average value of around 5, which is not a lot. That means we have a good approximation for $g(n,a)$. That one is for the engineers. Bye~\n","date":"2020-12-21T00:00:00Z","permalink":"https://sorashi.github.io/number-of-zeros-at-the-end-of-factorial-in-logarithmic-time/","title":"Number of zeros at the end of a factorial in logarithmic time"},{"content":"Foreword Oh, the Asus E200HA! A small Intel Cherry Trail netbook with 32GB of internal memory and 2 gigs of RAM. I bought one for its compact size and small weight. Boy, was it a mistake. It comes with Windows 10 pre-installed and Windows 10 sure likes huge updates and general littering of your drive. The device is literally unusable after a small while. That is not a huge deal, you can just install Linux, right? It wasn\u0026rsquo;t that easy. At the time I bought the device, Linux kernel hadn\u0026rsquo;t integrated drivers for its network card, audio card and SD card reader. Some people even reported they couldn\u0026rsquo;t get their touch-pad to work, or that the backlight control didn\u0026rsquo;t work. Intel Cherry Trail CPU series support was also stuttering, because of problems with power saving - the purpose of Cherry Trail processors.\nHopeless as it may seem, there are incredible people working on the Linux kernel every day and fighting against the powerful wave of proprietary devices that receive drivers only for Windows (some people suggest Windows may have contracts and does this intentionally so that people don\u0026rsquo;t use other systems, but that\u0026rsquo;s a conspiration-sounding statement). And they eventually managed to fix these problems (by version 5.3). But user-friendly Linux distributions do not update their kernel until it\u0026rsquo;s thoroughly tested. So there have been attempts at creating a script that would update the kernel and force some new drivers to be used, but I never managed to make audio work using the script.\nWhen Ubuntu 19.04 came around, the required kernel version was built in and supported. So I tried again. Audio still didn\u0026rsquo;t work, but I found out that the system isn\u0026rsquo;t configured to use (or recognize?) the audio card. And so I finally managed to get audio working. Eventually I realized that Ubuntu is still too big of a system for this timid device. Furthermore, kernel 5.3 had some problems with the graphics chip that ships with Cherry Trail devices, making your screen freeze and forcing you to hard-reset.\nAnd so I decided to install Arch. Because Arch lets you install just what you want and because Arch usually has bleeding-edge kernel. And since installing Arch is not completely user-friendly I decided to make a small guide (or rather a log) specifically for this device. I don\u0026rsquo;t guarantee it will work and I\u0026rsquo;m not responsible for any damages you may cause to your device. It\u0026rsquo;s actually just a record of what I did for a successful install at the time.\nGood luck and have fun!\nWarning: As of late February 2020 there seem to be screen freezing issues.\nLooks like Linux Mint latest edition 20 Ulyana - Cinnamon 64 works out of the box for this device! Thank you Badd Pitt for your comment.\nBooting I used Rufus on Windows to burn archlinux-2019.12.01-x86_64.iso to a drive in ISO mode.\nStart E200HA and press F1 or F2 repeatedly until you\u0026rsquo;re shown the BIOS menu. Move to boot options and specify the USB drive as the first option. Then save and exit.\nFirst Wi-Fi connection I needed to connect to eduroam (a global Wi-Fi network for educational institutions), which uses WPA-EAP. If you have access to a classic Wi-Fi, use wifi-menu to connect.\n To connect to eduroam, create wpa_supplicant config file: vi wpa_supplicant.conf  ctrl_interface=/run/wpa_supplicant update_config=1 # ^ these two lines may not be needed network={ ssid=\u0026#34;eduroam\u0026#34; key_mgmt=WPA-EAP eap=PEAP phase2=\u0026#34;none\u0026#34; identity=\u0026#34;*username*\u0026#34; password=\u0026#34;*password*\u0026#34; }  check if wlan0 interface exists: ip link see if you can connect to eduroam: wpa_supplicant -i wlan0 -c wpa_supplicant.conf cancel the process if the connection was successful; run it in background as a daemon: wpa_supplicant -B -i wlan0 -c wpa_supplicant.conf dhcpcd to get your ip ping google.com to check connection  Installation Use cfdisk /dev/mmcblk0 to create (in this order)\n300M EFI Filesystem 1G Linux swap rest Linux filesystem mkfs.fat -F32 /dev/mmcblk0p1 mkswap /dev/mmcblk0p2 mkfs.ext4 /dev/mmcblk0p3 mount /dev/mmcblk0p3 /mnt swapon /dev/mmcblk0p2 Edit mirrorlist to have your preferred mirrors at the top vi /etc/pacman.d/mirrorlist\npacstrap /mnt base base-devel linux linux-firmware genfstab -U -p /mnt \u0026gt;\u0026gt; /mnt/etc/fstab arch-chroot /mnt Choose a hostname\necho your_hostname \u0026gt; /etc/hostname Uncomment en_US.UTF-8 UTF-8 and en_US ISO-8859-1\npacman -S vim vim /etc/locale.gen locale_gen echo LANG=en_US.UTF-8 \u0026gt; /etc/locale.conf export LANG=en_US.UTF-8 Find your zone in /usr/share/zoneinfo/ using ls and then\nln -s /usr/share/zoneinfo/Europe/Prague /etc/localtime hwclock --systohc --utc passwd useradd -mg users -G wheel -s /bin/bash your_username passwd your_username pacman -S dhcp dhcpcd wpa_supplicant dialog netctl sudo vim /etc/sudoers # uncomment %wheel ALL=(ALL) ALL Now to the bootloader!\npacman -S grub efibootmgr dosfstools os-prober mtools mkdir /boot/EFI mount /dev/mmcblk0p1 /boot/EFI grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck grub-mkconfig -o /boot/grub/grub.cfg exit umount -a telinit 6 After reboot: Connect to wifi either using wifi-menu or create a profile in /etc/netctl then\nsudo ip link _ down # _ is your interface, find it using ip sudo netctl start profile_name sudo dhcpcd Install xorg server\nsudo pacman -S xf86-video-intel xorg-server-xephyr Now install your desired display manager, desktop environment and terminal, for example\npacman -S lightdm i3-gaps dmenu i3-status rxvt-unicode sudo systemctl enable lightdm reboot Congratulations! Now go have fun and make your system comfortable. Be sure to comment if you found a mistake, have problems or just want to add something.\n What I personally installed after that:\npacman -S yay git ranger yay powerline-fonts-git # then use \u0026#34;DejaVu Sans Mono for Powerline\u0026#34; font in your terminal yay rxvt-unicode-pixbuf I might add other things later 🙂\n","date":"2020-02-01T00:00:00Z","permalink":"https://sorashi.github.io/asus-e200ha-arch/","title":"Asus E200HA Arch Linux Installation Guide"},{"content":"Facebook has a great feature which allows you to download an archive of your data. This includes content of messages from Messenger, posts, photos and videos, comments etc.\nThis allows you to display interesting statistics if you can work with JSON in a programming language. For example, whom did you message the most in the last 30 days? Who of your friends writes the longest messages? Imagination is your only limit.\nTo request an archive of your messages follow these image clues (from Facebook settings):\nYou might see a problem after you download your archive and load it in your script/program though. If you have any Unicode characters in your data Facebook\u0026rsquo;s JSON strings will get corrupted when you parse them. It took me longer than it should to find out what\u0026rsquo;s going on. And that\u0026rsquo;s why I write this article - in hope to help others who find themselves in this situation.\nWhat\u0026rsquo;s going on Facebook apparently represents UTF-8 characters in a broken way. Instead of outputting one \\u escape sequence for each Unicode character, Facebook actually outputs two or more in their JSON strings. An example of a Unicode character in a Facebook JSON file is \\u00c5\\u0099. This is supposed to be a single character \\u0159 or Latin Small Letter R with Caron - ř. So what\u0026rsquo;s going on? It\u0026rsquo;s simple - Facebook doesn\u0026rsquo;t understand Unicode as a single character, but rather as separate bytes. In our case the bytes c5 99 in hexadecimal.\nThe problem is that when Facebook puts \\u00c5\\u0099 in a JSON string, most JSON prasers understand that as two Unicode characters. That\u0026rsquo;s because the escape sequence \\u00c5 is actually the Unicode code for Å and \\u0099 is a Unicode control character. Å is represented as two bytes in a proper UTF-8 file - c3 85 in hexadecimal. Same for \\u0099 - two bytes - c2 99.\nIn other words Facebook meant to output two single bytes, but ended up outputting the Unicode characters with their respective Unicode numbers being the bytes' values in hexadecimal, which is actually four bytes in total. That is totally wrong and doesn\u0026rsquo;t make any sense at all! I hope Facebook realizes this soon and fixes it so others don\u0026rsquo;t have to enjoy this great experience of additional trouble.\nSo when Facebook says \\u00c5\\u0099 they actually mean two separate bytes - c5 99. That is the byte sequence for the Unicode character \\u0159 - ř.\nHow to fix that Use Regex to find all \\u00hh sequences and replace them with the byte with the value of hh. The regex:\n\\\\u00([a-f0-9]{2}) Here is a Ruby script which fixes all JSON files in your message inbox. Then outputs the result.\npath = \u0026#39;../messages/inbox\u0026#39; Dir[\u0026#34;#{path.sub(\u0026#39;[\\\\/]$\u0026#39;, \u0026#39;\u0026#39;)}/**/message_1.json\u0026#34;]. each{|file| File.write(file, File.read(file) .gsub(/\\\\u00([a-f0-9]{2})/) {|m| $1.to_i(16).chr } ) puts \u0026#34;Done #{file}\u0026#34; } Snippet for PHP, which fixes all occurrences in $your_input_text and echoes the result.\nfunction replace_with_byte($match) { return chr(hexdec($match[1])); } echo preg_replace_callback(\u0026#39;/\\\\\\\\u00([a-f0-9]{2})/\u0026#39;, \u0026#39;replace_with_byte\u0026#39;, $your_input_text); ","date":"2019-09-13T00:00:00Z","permalink":"https://sorashi.github.io/fix-facebook-json-archive-encoding/","title":"How to fix Facebook archive JSON encoding"},{"content":"Diofantické rovnice jsou podurčené polynomiální rovnice, u kterých se hledá řešení v množině $\\mathbb{Z}$.\nLineární diofantická rovnice je rovnice ve tvaru součtu dvou monomů prvního řádu:\n$$ax+by=c\\,.$$\nTakovým rovnostem se také říká Bézoutovy. Lze je vyřešit pomocí rozšířeného Euklidova algoritmu.\nK čemu se ale řešení takových rovnic hodí? Pojďme se podívat na jednu úlohu, která se objevila v matematickém testu pro čtvrtou třídu základní školy.\n Mimoni založili orchestr. Umí hrát jen na basu nebo kytaru. Jejich basy mají 5 strun a jejich kytary mají 6 strun. Celkem mají nástroje v jejich orchestru 39 strun. Kolik Mimoňů hraje v orchestru?\n Po přečtení by měl být každý schopen převést slovní vyjádření do matematické notace\n$$5x+6y=39\\,.$$\nŽáci čtvrté třídy většinou neznají rozšířený Euklidův algoritmus. Naštěstí jsou zde malé koeficienty a s trochou pokusu a omylu by měli přijít na to, že řešením je $[x;y]=[3;4]$, neboli Mimoňů hraje v orchestru 7.\nPojďme si ale ukázat, jak by vypadalo obecné řešení, které lze aplikovat na podobné úlohy pro jakákoli čísla $a, b, c\\in \\mathbb{Z}$.\nBézoutova rovnost říká, že:\nNechť $c:=gcd(x,y)$, potom:\n$$\\forall x,y\\in\\mathbb{Z}\\ \\exists a,b\\in\\mathbb{Z}\\colon ax+by=c\\,.$$\nJelikož $gcd(5,6)=1$, naše rovnice má celočíselná řešení. Abychom je zjistili, musíme nejdříve nalézt řešení pro $5x+6y=gcd(5,6)=1$. K tomu lze využít Euklidův algoritmus.\n $6=5(1)+1$ $5=1(5)+0$  Zpětným dosazením zjistíme, že $5(-1)+6(1)=1$. U tohoto triviálního příkladu je to zřejmé, ale u složitějších verzí je zpětné dosazování delší. Toto dosazování je právě rozšířením Euklidova algoritmu.\nNyní, když jsme nalezli řešení pro $5x+6y=1$, jednoduše vynásobíme celou rovnici tak, abychom na pravé straně dostali požadované $c$. V našem případě 39.\n$$5(-39)+6(39)=39$$\nZískali jsme tak jedno z řešení $[x_1;y_1]=[-39;39]\\in K$. Všechna ostatní řešení mají následující tvar:\n$$\\bigg[x_1-r\\frac{b}{gcd(a,b)}; y_1+r\\frac{a}{gcd(a,b)}\\bigg]\\in K; r\\in \\mathbb{Z}\\,,\\\\ [-39-6r;39+5r]\\in K; r\\in \\mathbb{Z}\\,.$$\nPro vyřešení původní úlohy musíme nalézt uspořádanou dvojici $[x;y]$ takovou, že $x\u0026gt;0\\wedge y\u0026gt;0$. Toho lze jednoduše dosáhnout nerovnicemi.\n$$-39-6r\u0026gt;0 \\wedge 39+5r\u0026gt;0\\,,\\\\ r\u0026lt;-\\frac{13}{2} \\wedge r\u0026gt;-\\frac{39}{5}\\,,\\\\ r\u0026lt;-6,5\\wedge r\u0026gt;-7,8\\,.$$\nJediné celé číslo vyhovující této nerovnici je $r=-7$. Po dosazení $r$ do vzorce dostáváme $[x;y]=[3;4]$.\n Protože se jedná o algoritmus, jeho manuální exekuce je náchylná na chyby a často také fádní. Mnohem výhodnější je implementovat pro tento účel skript. Níže můžete vidět mé řešení v Pythonu. Pokud máte nějaké nápady na jeho vylepšení, můžete navštívit tento repozitář na GitHubu.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  def gcd(a, b): return a if b == 0 else gcd(b, a%b) def xgcd(a, b): x0, x1, y0, y1 = 0, 1, 1, 0 while a != 0: q, b, a = b // a, a, b % a y0, y1 = y1, y0 - q * y1 x0, x1 = x1, x0 - q * x1 return b, x0, y0 def diophantine_values(r, g, a, b, x1, y1): return (x1-r*b/g,y1+r*a/g) if __name__ == \u0026#34;__main__\u0026#34;: print(gcd(24,16)) print(\u0026#34;Linear diophantine equation input form ax+by=c\u0026#34;) a,b,c = [int(input(x+\u0026#34;=\u0026#34;)) for x in \u0026#34;abc\u0026#34;] g, x, y = xgcd(a,b) if g % c != 0: print(\u0026#34;There are no solutions\u0026#34;) k = c / g x*=k y*=k print(\u0026#34;Solution for r=0:\u0026#34;) print(diophantine_values(0,g,a,b,x,y)) while True: r=int(input(\u0026#34;r=\u0026#34;)) print(\u0026#34;Solution for r=\u0026#34; + str(r) + \u0026#34;:\u0026#34;) print(diophantine_values(r,g,a,b,x,y))    ","date":"2019-01-27T00:00:00Z","permalink":"https://sorashi.github.io/linear-diophantine-equations/","title":"(CZ) Lineární diofantické rovnice"},{"content":"There are so many rikai extensions that I got lost when I was trying to find my choice. I want this to be the go-to article for people who seek not only the full list of rikai extensions, but also the truth behind their origin.\nWe\u0026rsquo;ll begin with what you\u0026rsquo;re all here for:\n   Name Browser Repository Site     nazeka Firefox, works on Android GitHub None   10ten Japanese Reader (formerly Rikaichamp) Firefox GitHub Twitter   rikaichan Chrome \u0026amp; Firefox GitHub None   rikaikun Chrome GitHub None   RikaiRebuilt Chrome \u0026amp; Firefox GitHub None   Rikaisama Firefox (XPI, not published on Firefox addon site) None Yes   rikaiXUL N/A N/A mozdev   Yomichan Chrome \u0026amp; Firefox GitHub Yes    Now some information about some of them:\nnazeka is a rikai replacement with many interesting features and options, which are listed in the readme of the repository. It also works in Firefox on Android.\n10ten Japanese Reader is a port of rikaikun, which is a port of rikaichan, which is a port of rikaiXUL. It\u0026rsquo;s very fast.\nrikaichan is a fork of rikaiXUL, which took over the development. Originally only for Firefox, it was eventually published for Chrome too.\nrikaikun (Chrome) started as a port of rikaichan to Chrome, when rikaichan wasn\u0026rsquo;t available for Chrome yet.\nRikaiRebuilt is a rewrite of Rikaisama for WebExtension API, which aims to keep the structure of the original extension.\nRikaisama is a fork of rikachan with many new features and cutomization options, but it is no longer developed and not supported by Firefox anymore.\nrikaiXUL is an old Firefox add-on on which most of the rikai family members were based.\nYomichan is not a fork, but rather a whole different extension which focuses not only on dictionaries, but also the learning side of things. It has a built in integration for Anki, which makes the experience for Anki users a breeze.\nHow can I decide on my rikai extension? 10ten Japanese Reader is the latest fork (deepest in the fork tree) with many performance improvements and an active development community. But you should definitely check out all the other choices, explore their features and decide which one has the best feel to it for you.\nDo you know something I don\u0026rsquo;t? Do you want to make this more comprehensive? Edit this page!\n","date":"2018-12-05T00:00:00Z","permalink":"https://sorashi.github.io/comprehensive-list-of-rikai-extensions/","title":"A comprehensive list of Rikai extensions"}]